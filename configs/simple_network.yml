# Name: simple_networks
# Description: Describes an architecture composed by:
#  - 8 tiles with: 
#     - 1 core (1 thread)
#     - 16 l2 slices
#  - 8 MCPUs with: 
#     - 1 MC
#     - 8 memory banks 
#  - a simple NoC with a latency of 4 cycles per hop

---

# Simulation configuration
meta:
  params:
    architecture: core_topology_4           # (std::string)     Topology to simulate (core_topology_4)
    show_factories: false                   # (bool)            Print generated factories
    trace: false                            # (bool)            Generate a trace into paraver format
    events_to_trace: [any]                     # (std::vector<std::string>)    The events to trace (comma-separated). Default: All of them
    enable_smart_mcpu: false                # (bool)            Enable or disable smart MCPU
    fast_cache: false                       # (bool)            Use a fast L1 cache model instead of the default spike cache
    cmd: apps/spmv-vec/spmv              # (std::string)     App to execute in the RISC-V simulator

# Architecture configuration
top:
  cpu:
    params:
      frequency_ghz: 1                      # (double)          CPU Operating frequency
      num_cores: 8                          # (uint16_t)        The number of cores to simulate
      num_threads_per_core: 1               # (uint16_t)	      The number of threads per core
      thread_switch_latency: 0              # (uint16_t)	      The number of cycles required to make the thread runnable
      num_tiles: 8                          # (uint16_t)	      The number of tiles to simulate
      num_memory_cpus: 8                    # (uint16_t)        The number of MCPUs to simulate
      # num_memory_controllers: 1             # (uint16_t)	      The number of MCs to simulate
      isa: RV64IMAFDCV                      # (std::string)	    The RISC-V isa version to use 
      icache_config: 64:8:64                # (std::string)	    The L1$I cache configuration (sets:associativity:line_size)
      dcache_config: 64:8:64                # (std::string)	    The L1$D cache configuration (sets:associativity:line_size)
      varch: v512:e64:s512                  # (std::string)     The RISC-V Vector uArch string
      x_size: 4                             # (uint16_t)        The size of X dimension
      y_size: 4                             # (uint16_t)        The size of Y dimension
      mcpus_indices: [0,3,4,7,8,11,12,15]   # (std::vector<uint16_t>)     The network indices assigned to the MCPUs
    tile*:
      params:
        num_l2_banks: 16                    # (uint16_t)        The number of l2 cache banks in the tile
        latency: 1                          # (uint64_t)        The number of cycles to get to a local cache bank
        l2_sharing_mode: tile_private       # (std::string)     How the cache will be shared among the tiles (tile_private, fully_shared)
        bank_policy: set_interleaving       # (std::string)     The data mapping policy for banks (page_to_bank, set_interleaving)
        scratchpad_policy: set_interleaving # (std::string)     The data mapping policy for the scratchpad (page_to_bank, set_interleaving)
        tile_policy: set_interleaving       # (std::string)     The data mapping policy for tiles (page_to_bank, set_interleaving)
        address_policy: open_page           # (std::string)     The data mapping molicy in main memory (open_page, close_page)
      l2_bank*:
        params:
          line_size: 64                     # (uint64_t)        Cache line size (power of 2)
          size_kb: 256                      # (uint64_t)        Size of L2 cache in KB (power of 2)
          associativity: 16                 # (uint64_t)        L2 cache associativity (power of 2)
          always_hit: false                 # (bool)            L2 cache will always hit
          miss_latency: 15                  # (uint16_t)        Cache miss latency
          hit_latency: 15                   # (uint16_t)        Cache hit latency
          max_outstanding_misses: 16        # (uint16_t)        Maximum misses in flight to the next level
    memory_cpu*:
      params:
        line_size: 64                       # (uint64_t)        Cache line size (power of 2)
        latency: 0                          # (uint64_t)        The latency of the MCPU
    memory_controller*:
      params:
        num_banks: 8                        # (uint64_t)        The number of memory banks handled by this MC
        write_allocate: true                # (bool)            The write allocation policy
        reordering_policy: access_type      # (std::string)     The reordering policy for memory requests
      memory_bank*:
        params:
          num_rows: 16384                   # (uint64_t)        The number of rows
          num_columns: 64                   # (uint64_t)        The number of columns
          column_element_size: 32           # (uint64_t)        The size of column elements
          delay_open: 16                    # (uint64_t)        The delay to open a row
          delay_close: 16                   # (uint64_t)        The delay to close a row
          delay_read: 200                   # (uint64_t)        The delay to read
          delay_write: 200                  # (uint64_t)        The delay to write
    noc:
      params:
        noc_model: simple               # (std::string)     NoC Model to simulate (functional, simple, detailed)
        noc_networks:                       # (vector<string>)  NoC networks to define
          - "DATA_TRANSFER"
          - "ADDRESS_ONLY"
          - "CONTROL"
        message_header_size:                # (vector<string>)  The size of messages' header including CRC (in bits)
          - "REMOTE_L2_REQUEST:8"
          - "MEMORY_REQUEST_LOAD:8"
          - "MEMORY_REQUEST_STORE:8"
          - "MEMORY_REQUEST_WB:8"
          - "REMOTE_L2_ACK:8"
          - "MEMORY_ACK:8"
          - "MCPU_REQUEST:8"
          - "SCRATCHPAD_ACK:8"
          - "SCRATCHPAD_DATA_REPLY:8"
          - "SCRATCHPAD_COMMAND:8"
        latency_per_hop: 4                  # (uint16_t)        The average latency for each packet

...
